generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String
  avatar      String?
  phone       String?
  fullName    String?
  bio         String?
  age         Int?
  birthdate   DateTime?
  gender      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  chats       Chat[]       @relation("UserChats")
  messages    Message[]    @relation("UserMessages")
  forumPosts  ForumPost[]
  marketItems MarketItem[] @relation("UserMarketItems")
  media       Media[]
}

model Post {
  id        Int             @id @default(autoincrement())
  author    User            @relation(fields: [authorId], references: [id])
  authorId  Int
  content   String
  image     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  hashtags  HashtagOnPost[]
  comments  Comment[]
  likes     Like[]
  media     Media[]
}

model Hashtag {
  id    Int             @id @default(autoincrement())
  tag   String          @unique
  posts HashtagOnPost[]
}

model HashtagOnPost {
  postId    Int
  hashtagId Int
  post      Post    @relation(fields: [postId], references: [id])
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  @@id([postId, hashtagId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Chat {
  id        Int       @id @default(autoincrement())
  users     User[]    @relation("UserChats")
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  Int
  content   String
  createdAt DateTime @default(now())
}

model ForumCategory {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  posts ForumPost[]
}

model ForumPost {
  id          Int            @id @default(autoincrement())
  title       String
  content     String
  author      User           @relation(fields: [authorId], references: [id])
  authorId    Int
  category    ForumCategory  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model MarketItem {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  owner       User     @relation("UserMarketItems", fields: [ownerId], references: [id])
  ownerId     Int
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
}